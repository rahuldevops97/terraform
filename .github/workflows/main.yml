name: dt-infra-pillar-pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      # Step 3: Set up AWS Credentials (from GitHub Secrets)
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Modify the region as per your setup

      # Step 4: Install Checkov (for vulnerability scanning)
      - name: Install Checkov
        run: |
          pip install checkov

      # Step 5: Run Checkov Vulnerability Scan (for Terraform code)
      - name: Run Checkov Vulnerability Scan
        run: |
          checkov -d . --quiet

      # Step 6: Terraform Initialization
      - name: Terraform Init
        run: terraform init

      # Step 7: Terraform Validation
      - name: Terraform Validate
        run: terraform validate

      # Step 8: Terraform Format Check (optional)
      - name: Check Terraform Format
        run: terraform fmt -check -diff

      # Step 9: Terraform Plan
      - name: Terraform Plan
        run: terraform plan -out=tfplan

      # Step 10: Terraform Apply (only on main branch)
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan

      # Step 11: Post-Deployment Validation (optional)
      - name: Run Post-Deployment Tests
        run: |
          echo "Running post-deployment tests"
          # Example: Check if specific resources are created
          # Use AWS CLI or API to check resource status (e.g., check EC2 instances, S3 buckets)
          
          # For example, check EC2 instances in the region
          aws ec2 describe-instances --query "Reservations[].Instances[].InstanceId"

          # You can extend this with checks for other AWS resources or status codes
